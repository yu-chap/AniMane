version: 2
jobs:
    # build ジョブ: CircleCI 上で Docker コンテナを作成してテストする
    build:
        docker:
            - image: circleci/php:8.0-node-browsers
            - image: circleci/mysql:8.0

        environment:
            - DB_CONNECTION: circle_testing
            - MYSQL_ALLOW_EMPTY_PASSWORD: true

        working_directory: ~/CI-test

        steps:
            - checkout
            - run:
                name: Update apt-get
                command: sudo apt-get update
            - run:
                name: Docker php extensions install
                command: sudo docker-php-ext-install pdo_mysql
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "src/composer.json" }}
                    - v1-dependencies-
            - run:
                name: Install PHP libraries
                working_directory: src
                command: composer install -n --prefer-dist
            - save_cache:
                paths:
                    - ./vendor
                key: v1-dependencies-{{ checksum "src/composer.json" }}
            - run:
                name: base64 decode env file
                command: echo ${ENV_FILE} | base64 -di > .env.testing
            - run:
                name: Run PHPUnit
                working_directory: src
                command: vendor/bin/phpunit

    # deploy ジョブ: EC2 に SSH 接続して、デプロイを実行する
    deploy:
        machine:
            image: ubuntu-2004:202008-01

        steps:
            - checkout
            # CircleCI に登録した秘密鍵を呼び出す
            - add_ssh_keys:
                fingerprints:
                    - "${KEY_FINGERPRINT}"
            # CircleCI に登録した環境変数を使って SSH
            - run: ssh ${USER_NAME}@${HOST_NAME} 'cd ~/var/www/AniMane/ && git pull'

# push 後にテストを実行する
# main ブランチにpushされた場合はその後にデプロイを実行する
workflows:
    version: 2
    build_and_deploy:
        jobs:
            - build
            - deploy:
                requires:
                    - build
                filters:
                    branches:
                        only: main